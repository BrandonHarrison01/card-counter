{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\bbbra\\\\OneDrive\\\\Documents\\\\GitHub\\\\card-counter\\\\blakjak-counter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\bbbra\\\\OneDrive\\\\Documents\\\\GitHub\\\\card-counter\\\\blakjak-counter\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.scss';\n\nfunction App() {\n  const _useState = useState(52),\n        _useState2 = _slicedToArray(_useState, 2),\n        deck = _useState2[0],\n        setDeck = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        lowThresh = _useState4[0],\n        setLowThresh = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        medThresh = _useState6[0],\n        setMedThresh = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        highThresh = _useState8[0],\n        setHighThresh = _useState8[1];\n\n  const incrementLow = () => {\n    if (lowThresh < 20) {\n      setLowThresh(lowThresh + 1);\n      setDeck(deck - 1);\n    }\n  };\n\n  const incrementMed = () => {\n    if (medThresh < 12) {\n      setMedThresh(medThresh + 1);\n      setDeck(deck - 1);\n    }\n  };\n\n  const incrementHigh = () => {\n    if (highThresh < 20) {\n      setHighThresh(highThresh + 1);\n      setDeck(deck - 1);\n    }\n  };\n\n  const reset = () => {\n    setLowThresh(0);\n    setMedThresh(0);\n    setHighThresh(0);\n    setDeck(52);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, deck, \" cards remaining\"), React.createElement(\"div\", {\n    onClick: () => incrementLow(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"cards ranging from 2 - 6\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"showing \", lowThresh, \"/20 cards\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, Math.round((20 - lowThresh) / deck * 100), \"% chance of flipping\")), React.createElement(\"div\", {\n    onClick: () => incrementMed(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"cards ranging from 7 - 9\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"showing \", medThresh, \"/12\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, Math.round((12 - medThresh) / deck * 100), \"% chance of flipping\")), React.createElement(\"div\", {\n    onClick: () => incrementHigh(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"cards ranging from 10 + \"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"showing \", highThresh, \"/20\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, Math.round((20 - highThresh) / deck * 100), \"% chance of flipping\")), React.createElement(\"button\", {\n    onClick: () => reset(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"reset\"));\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\bbbra\\OneDrive\\Documents\\GitHub\\card-counter\\blakjak-counter\\src\\App.js"],"names":["React","useState","App","deck","setDeck","lowThresh","setLowThresh","medThresh","setMedThresh","highThresh","setHighThresh","incrementLow","incrementMed","incrementHigh","reset","Math","round"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,YAAP;;AAEA,SAASC,GAAT,GAAe;AAAA,oBAEWD,QAAQ,CAAC,EAAD,CAFnB;AAAA;AAAA,QAENE,IAFM;AAAA,QAEAC,OAFA;;AAAA,qBAGqBH,QAAQ,CAAC,CAAD,CAH7B;AAAA;AAAA,QAGNI,SAHM;AAAA,QAGKC,YAHL;;AAAA,qBAIqBL,QAAQ,CAAC,CAAD,CAJ7B;AAAA;AAAA,QAINM,SAJM;AAAA,QAIKC,YAJL;;AAAA,qBAKuBP,QAAQ,CAAC,CAAD,CAL/B;AAAA;AAAA,QAKNQ,UALM;AAAA,QAKMC,aALN;;AAOb,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAIN,SAAS,GAAG,EAAhB,EAAoB;AAClBC,MAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACAD,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AAAkB;AACrB,GAJD;;AAMA,QAAMS,YAAY,GAAG,MAAM;AACzB,QAAIL,SAAS,GAAG,EAAhB,EAAoB;AAClBC,MAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACAH,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD;AACF,GALD;;AAOA,QAAMU,aAAa,GAAG,MAAM;AAC1B,QAAIJ,UAAU,GAAG,EAAjB,EAAqB;AACnBC,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACAL,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD;AACF,GALD;;AAOA,QAAMW,KAAK,GAAG,MAAM;AAClBR,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAN,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GALD;;AASA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAL,qBADF,EAEE;AAAK,IAAA,OAAO,EAAE,MAAMQ,YAAY,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaN,SAAb,cAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKU,IAAI,CAACC,KAAL,CAAW,CAAC,KAAMX,SAAP,IAAoBF,IAApB,GAA2B,GAAtC,CAAL,yBAHF,CAFF,EAOE;AAAK,IAAA,OAAO,EAAE,MAAMS,YAAY,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaL,SAAb,QAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKQ,IAAI,CAACC,KAAL,CAAW,CAAC,KAAMT,SAAP,IAAoBJ,IAApB,GAA2B,GAAtC,CAAL,yBAHF,CAPF,EAYE;AAAK,IAAA,OAAO,EAAE,MAAMU,aAAa,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaJ,UAAb,QAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKM,IAAI,CAACC,KAAL,CAAW,CAAC,KAAMP,UAAP,IAAqBN,IAArB,GAA4B,GAAvC,CAAL,yBAHF,CAZF,EAiBE;AAAQ,IAAA,OAAO,EAAE,MAAMW,KAAK,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjBF,CADF;AAqBD;;AAED,eAAeZ,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\nfunction App() {\n\n  const [deck, setDeck] = useState(52)\n  const [lowThresh, setLowThresh] = useState(0)\n  const [medThresh, setMedThresh] = useState(0)\n  const [highThresh, setHighThresh] = useState(0)\n\n  const incrementLow = () => {\n    if (lowThresh < 20) {\n      setLowThresh(lowThresh + 1)\n      setDeck(deck - 1)}\n  }\n\n  const incrementMed = () => {\n    if (medThresh < 12) {\n      setMedThresh(medThresh + 1)\n      setDeck(deck - 1)\n    }\n  }\n\n  const incrementHigh = () => {\n    if (highThresh < 20) {\n      setHighThresh(highThresh + 1)\n      setDeck(deck - 1)\n    }\n  }\n\n  const reset = () => {\n    setLowThresh(0)\n    setMedThresh(0)\n    setHighThresh(0)\n    setDeck(52)\n  }\n\n\n\n  return (\n    <div className=\"app\">\n      <h1>{deck} cards remaining</h1>\n      <div onClick={() => incrementLow()}>\n        <h3>cards ranging from 2 - 6</h3>\n        <h5>showing {lowThresh}/20 cards</h5>\n        <h5>{Math.round((20  - lowThresh) / deck * 100)}% chance of flipping</h5>\n      </div>\n      <div onClick={() => incrementMed()}>\n        <h3>cards ranging from 7 - 9</h3>\n        <h5>showing {medThresh}/12</h5>\n        <h5>{Math.round((12  - medThresh) / deck * 100)}% chance of flipping</h5>\n      </div>\n      <div onClick={() => incrementHigh()} >\n        <h3>cards ranging from 10 + </h3>\n        <h5>showing {highThresh}/20</h5>\n        <h5>{Math.round((20  - highThresh) / deck * 100)}% chance of flipping</h5>\n      </div>\n      <button onClick={() => reset()}>reset</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}